<div class="row">
<h1>Javascript Basics</h1>

<div class="panel panel-info">
    <div class="panel-heading">To run sample code</div>
    <div class="panel-body">
        Feel free to follow along! Open the console on your Developer Tools and paste the code in! (For Chrome on Mac: cmd + opt + J, or windows: ctrl + shift + J). <br /><br />Got it all covered? Try out this <a href="http://jsfiddle.net/dv99v/1/">JSFiddle exercise</a> to see if you can pass all the tests.
    </div>
</div>

<h3>Variables</h3>

<div class="snippet">
  <div class="col-md-6">
    <div class="row">
      <pre class="prettyprint linenums">
// this is a single line comment
var city;
city = "Palo Alto";

/*
 * Comment on multiple lines.
 */
var zip = 94309;
      </pre>
    </div>
  </div>
  <div class="col-md-6">
    <div class="annotation">
      Variables in JavaScript do not have types, so they can be any type of variable (string, integer, double, etc).
    </div>
  </div>

</div>

<div class="clearfix"></div>

<h3>If Statements</h3>

<div class="snippet">
  <div class="col-md-6">
    <div class="row">
      <pre class="prettyprint linenums">
var dessert = "chocolate";
if(dessert = "chocolate") {
    console.log("Yum"); // shows up in the console
} else if (dessert === "eggplant"){
    console.log("Ew");
} else {
    console.log("I'm hungry, ma");
}

if(0 == "") {
    // alert() brings up those icky web1.0 popups
    alert("this is whack!!!$!$!"); 
}
      </pre>
    </div>
  </div>
  <div class="col-md-6">
    <div class="annotation">
      <strong>Important</strong>: You should almost always use triple equals ===. This checks that elements are equal in both value and type.
    </div>
    <div style="height: 100px" class="hidden-sm hidden-xs"></div>
    <div class="annotation">
      <strong>Do not</strong> use double equals (==). Weird things start happening because it tries to convert values to the same type. Just don't do it.
    </div>
  </div>

</div>

<div class="clearfix"></div>

<h3>Functions</h3>

<div class="snippet">
  <div class="col-md-6">
    <div class="row">
      <pre class="prettyprint linenums">
function add(a, b) {
    return a + b;
}

var adder = function(a, b) {
    return a + b;
}

add(1, 2);
adder(3, 4);

      </pre>
    </div>
  </div>
  <div class="col-md-6">
    <div class="annotation">
      You can define functions inline by using the keyword <strong>function</strong>.
    </div>
    <div class="annotation">
      You can also assign a function to a variable. In Javascript, every function is actually a <code>Function</code> object. 
    </div>
    <div class="annotation">
      Try each of these functions! Both are completely valid.
    </div>
  </div>

</div>

<div class="clearfix"></div>

<h3>Objects</h3>

<p>Objects have properties (values) and methods (functions).</p>

<div class="snippet">
  <div class="col-md-6">
    <div class="row">
      <pre class="prettyprint linenums">
var yourChick = {};
yourChick.thirsty = true;

var missingFish = { name: "Nemo", color: "orange" };

var dreamCar = { 
    brand: "Audi", 
    color: "white" 
};

dreamCar.brand;
dreamCar['brand'];
      </pre>
    </div>
  </div>
  <div class="col-md-6">
    <div class="annotation">
      There are a number of different ways to define objects and their properties. 
    </div>
    <div class="annotation">
      Notice spaces and line breaks don't matter. An object definition can be multiple lines.
    </div>
    <div style="height: 50px" class="hidden-sm hidden-xs"></div>
    <div class="annotation">
        You can access the object properties in two different ways.
    </div>
  </div>

</div>

<div class="clearfix"></div>
<br /><br />
<p>Because functions can also be assigned to variables, you can assign functions to object properties.</p>

<div class="snippet">
  <div class="col-md-6">
    <div class="row">
      <pre class="prettyprint linenums">
var myBirthday = { 
    month: "Feb", 
    date: 9,
    fullDate: function() {
        return this.month + ' ' + this.date;
    }
};

myBirthday.fullDate(); // evaluates to Feb 9
      </pre>
    </div>
  </div>
  <div class="col-md-6">
    <div class="annotation">
      To execute a method of a particular object, make sure to invoke it with the double parentheses ().
    </div>
    <div class="annotation">
      Without the (), the function definition will be returned.
    </div>
  </div>

</div>

<div class="clearfix"></div>


<h3>Arrays &amp; For Loops</h3>

<div class="snippet row">
  <div class="col-md-12">
    <div class="row">
      <pre class="prettyprint linenums no-esp">
var blank = []; // initializes an empty array

var tones = ["Do", "Re", "Mi"];
tones[3] = "Fa";  // careful when using this, tones[10] will create weird holes!
tones[tones.length] = "So"  // Notice length is a property of array
tones.push("La");

console.log("There are " + tones.length + " notes.");

var song = "";
for(var i=0; i&lt;tones.length; i++) {
    song +=  "Let's sing " + tones[i] + "\n";
}
console.log(song);
      </pre>
    </div>
  </div>

</div>

<div class="clearfix"></div>



</div>